name: C/C++ CI

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'

  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]

jobs:
  linux:
    name: 'Linux'
    runs-on: ubuntu-latest
    container: s1lentq/linux86buildtools:latest

    steps:
      - name: Te
        run: node --version

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Run unittests
        run: |
          rm -rf build && CC=icc CXX=icpc cmake -DCMAKE_BUILD_TYPE=Unittests -B build && cmake --build build -j8
          retVal=0
          export LD_LIBRARY_PATH="rehlds/lib/linux32:$LD_LIBRARY_PATH"
          ./build/rehlds/engine_i486 2> /dev/null > result.log || retVal=$?
          while read line; do
            if [[ ${line} == *"Warning in test"* ]] ; then
              echo -e "\e[2;38m$line"
            elif [[ ${line} == *"Failure in test"* ]] ; then
              echo -e "\e[1;31m$line"
            else
              echo -e "\e[0;33m$line"
            fi
          done <<< $(cat result.log)

          if [ $retVal -ne 0 ] && [ $retVal -ne 3 ]; then
            echo -e "\e[30;41mExit code: $retVal\e[0m"
            exit 1 # Unittest failed
          else
            echo -e "\e[30;43mExit code: $retVal\e[0m"
          fi
        shell: bash

      - name: Build using Intel C++ Compiler
        run: |
          rm -rf build && CC=icc CXX=icpc cmake -B build && cmake --build build -j8

      - name: Prepare HLSDK
        run: |
          mkdir -p publish/hlsdk
          rsync -a rehlds/common/ publish/hlsdk/common/
          rsync -a rehlds/dlls/ publish/hlsdk/dlls/
          rsync -a rehlds/pm_shared/ publish/hlsdk/pm_shared/
          rsync -a rehlds/public/ publish/hlsdk/public/ --exclude rehlds/
          rsync -a rehlds/public/rehlds/ publish/hlsdk/engine

      - name: Move files
        run: |
          mkdir -p publish/bin/linux32/valve/dlls
          mv build/rehlds/engine_i486.so publish/bin/linux32/engine_i486.so
          mv rehlds/version/appversion.h publish/appversion.h
          mv build/rehlds/dedicated/hlds_linux publish/bin/linux32/hlds_linux
          mv build/rehlds/HLTV/Console/hltv publish/bin/linux32/hltv
          mv build/rehlds/HLTV/Core/core.so publish/bin/linux32/core.so
          mv build/rehlds/HLTV/Proxy/proxy.so publish/bin/linux32/proxy.so
          mv build/rehlds/HLTV/DemoPlayer/demoplayer.so publish/bin/linux32/demoplayer.so
          mv build/rehlds/HLTV/Director/director.so publish/bin/linux32/valve/dlls/director.so
          mv build/rehlds/filesystem/FileSystem_Stdio/filesystem_stdio.so publish/bin/linux32/filesystem_stdio.so

      - name: Run GLIBC/ABI version compat test
        run: |
          binaries=(
            "publish/bin/linux32/engine_i486.so"
            "publish/bin/linux32/hlds_linux"
            "publish/bin/linux32/hltv"
            "publish/bin/linux32/core.so"
            "publish/bin/linux32/proxy.so"
            "publish/bin/linux32/demoplayer.so"
            "publish/bin/linux32/valve/dlls/director.so"
            "publish/bin/linux32/filesystem_stdio.so"
          )
          bash ./rehlds/version/glibc_test.sh ${binaries[@]}
          if [[ $? -ne 0 ]]; then
            exit 1 # Assertion failed
          fi
        shell: bash

      - name: Deploy artifacts
        uses: actions/upload-artifact@v3.1.1
        id: upload-job
        with:
          name: linux32
          path: publish/*

      - name: Cleanup temporary artifacts
        if: success() && steps.upload-job.outcome == 'success'
        run: |
          rm -rf hlsdk
          rm -f appversion.h
